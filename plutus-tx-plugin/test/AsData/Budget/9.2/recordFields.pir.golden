let
  !addInteger : integer -> integer -> integer
    = \(x : integer) (y : integer) -> addInteger x y
  !int : data -> integer
    = \(ds : data) ->
        let
          !tup : pair integer (list data) = unConstrData ds
        in
        ifThenElse
          {all dead. integer}
          (equalsInteger 0 (fstPair {integer} {list data} tup))
          (/\dead ->
             let
               !l : list data = sndPair {integer} {list data} tup
               !l : list data = tailList {data} l
               !l : list data = tailList {data} l
               !ds : integer = unIData (headList {data} l)
               !ds : integer = unIData (headList {data} l)
               !ds : integer = unIData (headList {data} (tailList {data} l))
             in
             unIData (headList {data} l))
          (/\dead -> error {integer})
          {all dead. dead}
  !int : data -> integer
    = \(ds : data) ->
        let
          !tup : pair integer (list data) = unConstrData ds
        in
        ifThenElse
          {all dead. integer}
          (equalsInteger 0 (fstPair {integer} {list data} tup))
          (/\dead ->
             let
               !l : list data = sndPair {integer} {list data} tup
               !l : list data = tailList {data} l
               !l : list data = tailList {data} l
               !ds : integer = unIData (headList {data} l)
               !ds : integer = unIData (headList {data} l)
               !ds : integer = unIData (headList {data} (tailList {data} l))
             in
             unIData (headList {data} l))
          (/\dead -> error {integer})
          {all dead. dead}
  !int : data -> integer
    = \(ds : data) ->
        let
          !tup : pair integer (list data) = unConstrData ds
        in
        ifThenElse
          {all dead. integer}
          (equalsInteger 0 (fstPair {integer} {list data} tup))
          (/\dead ->
             let
               !l : list data = sndPair {integer} {list data} tup
               !l : list data = tailList {data} l
               !l : list data = tailList {data} l
               !ds : integer = unIData (headList {data} l)
               !ds : integer = unIData (headList {data} l)
               !ds : integer = unIData (headList {data} (tailList {data} l))
             in
             unIData (headList {data} l))
          (/\dead -> error {integer})
          {all dead. dead}
  !int : data -> integer
    = \(ds : data) ->
        let
          !tup : pair integer (list data) = unConstrData ds
        in
        ifThenElse
          {all dead. integer}
          (equalsInteger 0 (fstPair {integer} {list data} tup))
          (/\dead ->
             let
               !l : list data = sndPair {integer} {list data} tup
               !l : list data = tailList {data} l
               !l : list data = tailList {data} l
               !ds : integer = unIData (headList {data} l)
               !ds : integer = unIData (headList {data} l)
               !ds : integer = unIData (headList {data} l)
             in
             unIData (headList {data} (tailList {data} l)))
          (/\dead -> error {integer})
          {all dead. dead}
  data Bool | Bool_match where
    True : Bool
    False : Bool
  !lessThanInteger : integer -> integer -> Bool
    = \(x : integer) (y : integer) ->
        ifThenElse {Bool} (lessThanInteger x y) True False
in
\(d : data) ->
  let
    !x : integer = int d
    !y : integer = int d
    !z : integer = int d
    !w : integer = int d
  in
  addInteger
    (addInteger
       (addInteger (addInteger (addInteger x y) z) w)
       (Bool_match
          (lessThanInteger (addInteger y z) (addInteger x w))
          {all dead. integer}
          (/\dead -> addInteger x z)
          (/\dead -> addInteger y w)
          {all dead. dead}))
    (Bool_match
       (lessThanInteger
          (addInteger (int d) (int d))
          (addInteger (int d) (int d)))
       {all dead. integer}
       (/\dead -> addInteger (int d) (int d))
       (/\dead -> addInteger (int d) (int d))
       {all dead. dead})